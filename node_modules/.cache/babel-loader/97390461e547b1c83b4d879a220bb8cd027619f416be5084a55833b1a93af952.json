{"ast":null,"code":"var _jsxFileName = \"/Users/zoe/Desktop/Independent/cat/my-app/src/components/DateRangeForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DateRangeForm(props) {\n  _s();\n  const [billingDate, setBillingDate] = useState(null);\n  const [selectedDateRange, setSelectedDateRange] = useState(null);\n  const [spendDetails, setSpendDetails] = useState([]);\n  useEffect(() => {\n    const fetchBillingDate = async () => {\n      const sessionEmail = localStorage.getItem(\"email\");\n      console.log(sessionEmail);\n      const response = await axios.post('https://www.zoelindev.com/moneyCatBackend/dateRangeForm.php', {\n        email: sessionEmail,\n        startDate: selectedDateRange.startDate,\n        endDate: selectedDateRange.endDate\n      });\n      const data = response.data;\n      setBillingDate(data.billing);\n      setSpendDetails(response.data);\n    };\n    fetchBillingDate();\n  }, [props.sessionEmail]);\n  useEffect(() => {\n    if (billingDate) {\n      const billStartDate = new Date(billingDate);\n      console.log('billingDate: ' + billingDate);\n      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      const options = [];\n      const now = new Date();\n      let monthNow = monthNames[now.getMonth()];\n      console.log(monthNow);\n      for (let i = 1; i < 13; i++) {\n        const now = new Date();\n        const monthStartDate = new Date(now.getFullYear(), now.getMonth() + i - 1, now.getDate());\n        const monthEndDate = new Date(now.getFullYear(), now.getMonth() + i + 0, billingDate - 1);\n        const optionLabel = `${monthNames[monthStartDate.getMonth()]} ${billingDate} ~ ${monthNames[monthEndDate.getMonth()]} ${monthEndDate.getDate()}`;\n        const optionStartDate = monthStartDate.toISOString().slice(0, 10);\n        options.push({\n          startDate: optionStartDate,\n          endDate: monthEndDate.toISOString(),\n          label: optionLabel\n        });\n      }\n      setSelectedDateRange(options[0]);\n      setOptions(options);\n    }\n  }, [billingDate]);\n  const [options, setOptions] = useState([{\n    startDate: \"\",\n    label: \"Choose date range\"\n  }]);\n  const handleDateRangeChange = event => {\n    const selectedOption = options.find(option => option.startDate === event.target.value);\n    setSelectedDateRange(selectedOption);\n    console.log(selectedOption);\n    setSpendDetails([]);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Do something with selectedDateRange\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Select a date range:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedDateRange ? selectedDateRange.startDate : '',\n        onChange: handleDateRangeChange,\n        required: true,\n        children: options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option.startDate,\n          children: option.label\n        }, option.startDate, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_s(DateRangeForm, \"21tIP0lISPHhp2HWlhN+tMOWC0U=\");\n_c = DateRangeForm;\nexport default DateRangeForm;\nvar _c;\n$RefreshReg$(_c, \"DateRangeForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","DateRangeForm","props","billingDate","setBillingDate","selectedDateRange","setSelectedDateRange","spendDetails","setSpendDetails","fetchBillingDate","sessionEmail","localStorage","getItem","console","log","response","post","email","startDate","endDate","data","billing","billStartDate","Date","monthNames","options","now","monthNow","getMonth","i","monthStartDate","getFullYear","getDate","monthEndDate","optionLabel","optionStartDate","toISOString","slice","push","label","setOptions","handleDateRangeChange","event","selectedOption","find","option","target","value","handleSubmit","preventDefault","map"],"sources":["/Users/zoe/Desktop/Independent/cat/my-app/src/components/DateRangeForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction DateRangeForm(props) {\n    const [billingDate, setBillingDate] = useState(null);\n    const [selectedDateRange, setSelectedDateRange] = useState(null);\n    const [spendDetails, setSpendDetails] = useState([]);\n\n    useEffect(() => {\n        const fetchBillingDate = async () => {\n\n            const sessionEmail = localStorage.getItem(\"email\");\n            console.log(sessionEmail);\n            const response = await axios.post('https://www.zoelindev.com/moneyCatBackend/dateRangeForm.php', { \n                email: sessionEmail, \n                startDate: selectedDateRange.startDate,\n                endDate: selectedDateRange.endDate\n            });\n            const data = response.data;\n            setBillingDate(data.billing);\n            setSpendDetails(response.data);\n        };\n\n        fetchBillingDate();\n    }, [props.sessionEmail]);\n\n    useEffect(() => {\n        if (billingDate) {\n            const billStartDate = new Date(billingDate);\n            console.log('billingDate: '+ billingDate);\n            const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n            const options = [];\n\n            const now = new Date();\n            let monthNow = monthNames[now.getMonth()];\n            console.log(monthNow);\n\n            for (let i = 1; i < 13; i++) {\n                const now = new Date();\n                const monthStartDate = new Date(now.getFullYear(), now.getMonth()  + i - 1, now.getDate());\n\n                const monthEndDate = new Date(now.getFullYear(), now.getMonth() + i + 0, billingDate - 1);\n\n                const optionLabel = `${monthNames[monthStartDate.getMonth()]} ${billingDate} ~ ${monthNames[monthEndDate.getMonth()]} ${monthEndDate.getDate()}`;\n\n                const optionStartDate = monthStartDate.toISOString().slice(0, 10);\n\n\n                options.push({\n                    startDate: optionStartDate,\n                    endDate: monthEndDate.toISOString(),\n                    label: optionLabel\n                });\n            }\n\n            setSelectedDateRange(options[0]);\n            setOptions(options);\n        }\n    }, [billingDate]);\n\n    const [options, setOptions] = useState([{ startDate: \"\", label: \"Choose date range\" }]);\n\n    const handleDateRangeChange = (event) => {\n        const selectedOption = options.find(option => option.startDate === event.target.value);\n        setSelectedDateRange(selectedOption);\n        console.log(selectedOption);\n        setSpendDetails([]);\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        // Do something with selectedDateRange\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label>\n                Select a date range:\n                <select value={selectedDateRange ? selectedDateRange.startDate : ''} onChange={handleDateRangeChange} required>\n                    {options.map(option => (\n                        <option key={option.startDate} value={option.startDate}>{option.label}</option>\n                    ))}\n                </select>\n            </label>\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n}\n\nexport default DateRangeForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}